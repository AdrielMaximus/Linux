# Backup Automation Script

## Overview

This project provides a Bash script designed to automate the backup of configuration files from the `/etc` directory to a designated backup folder. The script creates a copy of critical system configuration files for recovery purposes.

## Purpose

The primary goal is to safeguard system configuration files stored in `/etc`, which are essential for system operation (e.g., `/etc/passwd`, `/etc/fstab`). Backups mitigate risks from accidental modifications, corruption, or system failures, enabling quick recovery.

## Features

- **Automated Backup**: Copies all files and subdirectories from `/etc` to a specified backup directory.  
- **Versioning**: Incorporates timestamps in backup filenames for easy identification and rollback.  
- **Error Handling**: Checks for destination directory existence and appropriate permissions.  
- **Log Output**: Optionally logs backup operations for auditing and troubleshooting.

## Requirements

- **Operating System**: Unix/Linux-based system (e.g., Ubuntu, CentOS)  
- **Permissions**: Root or sudo privileges to access `/etc` and write to the backup directory  
- **Tools**:
  - Bash shell (`/bin/bash`)
  - Standard Unix utilities: `cp`, `tar`, `date`, `mkdir`
- **Storage**: Sufficient disk space in the backup destination (e.g., `/backup/etc`)

## Setup Instructions

### 1. Create the Script

- Write a Bash script (e.g., `backup_etc.sh`) to copy `/etc` to a backup directory.
- Ensure the script includes:
  - Timestamp for versioned backups (e.g., `backup-YYYY-MM-DD.tar.gz`)
  - Error checks (e.g., verify destination exists with `mkdir -p`)
  - Preservation of file permissions (e.g., use `cp -p` or `rsync -a`)

```bash
#!/bin/bash
# Example snippet
BACKUP_DIR="/backup/etc"
TIMESTAMP=$(date +%F)
DEST="$BACKUP_DIR/backup-$TIMESTAMP.tar.gz"

mkdir -p "$BACKUP_DIR"
tar -czpf "$DEST" /etc
````

* Save the script in a secure location (e.g., `/usr/local/bin/backup_etc.sh`)
* Make it executable:

```bash
chmod +x /usr/local/bin/backup_etc.sh
```

### 2. Test the Script

* Run the script manually to verify functionality:

```bash
sudo /usr/local/bin/backup_etc.sh
```

* Check the backup directory for the created files and validate their integrity.

### 3. Monitor Logs

* Check `/var/log/backup.log` (or your chosen log file) for execution details and errors.

## Directory Structure

* **Source**: `/etc` (system configuration files)
* **Backup Destination**: Customizable (e.g., `/backup/etc`, `/home/user/backup`)
* **Log File**: Optional, e.g., `/var/log/backup.log`

## Best Practices

* **Security**: Restrict access to the backup directory:

```bash
chmod 700 /backup/etc
```

This helps protect sensitive data (e.g., hashed passwords in `/etc/shadow`).

* **Storage**: Consider off-site or external storage for critical backups to follow the **3-2-1 backup rule** (3 copies, 2 media types, 1 off-site).
* **Rotation**: Implement log rotation (e.g., using `logrotate`) to manage disk space.
* **Testing**: Periodically test restoration from backups to ensure they are usable.
* **Compression**: Use `tar` and `gzip` to reduce backup size:

```bash
tar -czf backup.tar.gz /etc
```

## Limitations

* Requires root privileges, which may pose security risks if not handled carefully.
* Backups are local; extend to remote storage for better resilience.
* No built-in encryption; use `gpg` or similar tools for sensitive data.
* Full backups are performed each time; consider `rsync` for incremental backups to save space.

## Troubleshooting

* **Permission Denied**: Ensure the script runs as root or with `sudo`.
* **Disk Full**: Monitor backup destination space and implement rotation.
* **Corrupted Backups**: Validate backups by extracting and comparing files.

