# 🛡️ Backup Automation Script

A Bash script to automate the backup of critical system configuration files from the `/etc` directory to a specified destination folder.

---

## 📌 Overview

This project helps system administrators automate the backup of system configuration files. It ensures that important data stored in `/etc` is preserved and can be restored in the event of accidental changes, corruption, or system failures.

---

## 🎯 Purpose

System configuration files are essential for Linux system operation (e.g., `/etc/passwd`, `/etc/fstab`). Regular backups:

- Protect against unintentional changes or deletions
- Enable quick recovery after failures
- Improve system reliability and uptime

---

## ✨ Features

✅ **Automated Backups**: Copies all files and subdirectories from `/etc`  
🕒 **Versioning**: Adds timestamp to each backup for easy identification  
⚠️ **Error Handling**: Validates destination path and permissions  
📝 **Logging**: Optionally records backup operations for audit/troubleshooting

---

## 🧰 Requirements

| Requirement      | Description                                 |
|------------------|---------------------------------------------|
| OS               | Unix/Linux (e.g., Ubuntu, CentOS)           |
| Permissions      | Root or `sudo` privileges                   |
| Tools            | `bash`, `cp`, `tar`, `date`, `mkdir`        |
| Storage          | Sufficient disk space in the backup location|

---

## ⚙️ Setup Instructions

### 1. 📝 Create the Script

Create a file `backup_etc.sh` with the following contents:

```bash
#!/bin/bash

# Configurable variables
BACKUP_DIR="/backup/etc"
TIMESTAMP=$(date +%F)
BACKUP_FILE="$BACKUP_DIR/backup-$TIMESTAMP.tar.gz"
LOG_FILE="/var/log/backup.log"

# Ensure backup directory exists
mkdir -p "$BACKUP_DIR"

# Create the backup
if tar -czpf "$BACKUP_FILE" /etc 2>>"$LOG_FILE"; then
    echo "$(date): Backup successful: $BACKUP_FILE" >> "$LOG_FILE"
else
    echo "$(date): Backup failed" >> "$LOG_FILE"
    exit 1
fi
````

Save it in a secure location, such as:

```bash
/usr/local/bin/backup_etc.sh
chmod +x /usr/local/bin/backup_etc.sh
```

---

### 2. 🧪 Test the Script

Run the script manually:

```bash
sudo /usr/local/bin/backup_etc.sh
```

Then check the backup directory and ensure the archive file exists and is valid.

---

### 3. 📊 Monitor Logs

Logs can help identify backup issues:

```bash
cat /var/log/backup.log
```

You can also set up **log rotation** using `logrotate`.

---

## 📁 Directory Structure

| Component           | Path                         |
| ------------------- | ---------------------------- |
| Source              | `/etc`                       |
| Backup Destination  | `/backup/etc` (customizable) |
| Log File (optional) | `/var/log/backup.log`        |

---

## ✅ Best Practices

🔒 **Security**
Restrict access to the backup directory to prevent leaks:

```bash
chmod 700 /backup/etc
```

💾 **Storage Strategy**
Follow the **3-2-1 backup rule**:

* 3 copies of your data
* 2 different media types
* 1 off-site copy

🔁 **Log Rotation**
Use tools like `logrotate` to manage growing log files.

🧪 **Test Restores**
Regularly extract backups to verify their integrity.

🗜️ **Compression**
Reduce size with tar/gzip:

```bash
tar -czf backup.tar.gz /etc
```

---

## ⚠️ Limitations

* Requires root access (potential security concern)
* Local backups only (can be extended to remote)
* No built-in encryption (can be added)
* Full backup every time — no incremental logic by default

---

## 🛠️ Troubleshooting

| Problem             | Solution                                  |
| ------------------- | ----------------------------------------- |
| `Permission Denied` | Run script with `sudo` or as root         |
| `Disk Full`         | Monitor disk usage and implement rotation |
| `Corrupted Backup`  | Test restores regularly using `tar -xzf`  |

---

## 🚀 Future Improvements

* 📧 Email notifications on success/failure
* 🔁 Incremental backups using `rsync`
* ☁️ Remote storage integration (e.g., AWS S3, FTP)
* 🔐 Backup encryption using `gpg` or similar tools

---
